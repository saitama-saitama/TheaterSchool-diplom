generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email String @unique
    login String
    password String
    role UserRole @default(USER)
    provider String?
    providerId Int?
    //verified DateTime?
    verified  Boolean  @default(false)

    account Account[]
    singUp SingUp[]
    verificationCode VerificationCode?

    createAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Performance {
    id Int @id @default(autoincrement())

    name String
    imgUrl String
    tickets Tickets[]
    city City[]
    genre Genre[]

    createAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Teacher {
    id Int @id @default(autoincrement())
    
    name String
    courses CourseTeacher[]
}

model CourseTeacher {
    id Int @id @default(autoincrement())

    courseId Int
    teacherId Int

    course Course @relation(fields: [courseId], references: [id])
    teacher Teacher @relation(fields: [teacherId], references: [id])
}

model Course {
    id Int @id @default(autoincrement())

    name String @unique
    imgUrl String

    group Group[]
    singUp SingUp[]
    courseTeacher CourseTeacher[]

    createAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SingUp {
    id Int @id @default(autoincrement())

    method String
    period String
    teacher String

    user User @relation(fields: [userId], references: [id])
    userId Int

    course Course @relation(fields: [courseId], references: [id])
    courseId Int
    
    createAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Group {
    id Int @id @default(autoincrement())

    number Int
    teacher String
    course Course[]

    createAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tickets {
    id Int @id @default(autoincrement())

    row Int
    number Int
    performance Performance[]

    createAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id Int @id @default(autoincrement())

    user User @relation(fields: [userId], references: [id])
    userId Int

    createAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user User @relation(fields: [userId], references: [id])
    userId Int @unique
    code String

    createAt DateTime @default(now())
}

model City {
    id Int @id @default(autoincrement())

    name String
    performance Performance[]

    createAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Genre {
    id Int @id @default(autoincrement())

    name String
    performance Performance[]

    createAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum UserRole {
    USER
    ADMIN 
}